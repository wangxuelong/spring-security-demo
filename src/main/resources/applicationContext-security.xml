<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http pattern="/login.jsp" security="none" />
	<http pattern="/logout/**" security="none" />

	<!-- 当访问被拒绝时，会转到403.jsp -->
	<http access-denied-page="/error/403.jsp"
		entry-point-ref="authenticationProcessingFilterEntryPoint">
		<form-login login-page="/login" default-target-url="/index" />
		<logout logout-success-url="/login" />

		<http-basic />
		<remember-me />
		<!-- <custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER" /> -->
		<!-- <custom-filter ref="" position="LOGOUT_FILTER" /> -->
		<!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter" />
	</http>

	<!-- <beans:bean id="myLoginFilter" -->
	<!-- class="com.wxl.demo.spring.security.MyUsernamePasswordAuthenticationFilter"> -->
	<!-- <beans:property name="authenticationManager" ref="authenticationManager"></beans:property> -->
	<!-- </beans:bean> -->

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter"
		class="com.wxl.demo.spring.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"></beans:property>
		<beans:property name="securityMetadataSource" ref="securityMetadataSource"></beans:property>
	</beans:bean>

	<authentication-manager alias="authenticationManager"
		erase-credentials="true">
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- 如果用户的密码采用加密的话，可以加点“盐” <password-encoder hash="md5"></password-encoder> -->
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="myUserDetailService"
		class="com.wxl.demo.spring.security.MyUserDetailService"></beans:bean>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.wxl.demo.spring.security.MyAccessDecisionManager"></beans:bean>

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.wxl.demo.spring.security.MyInvocationSecurityMetadataSource"></beans:bean>

	<beans:bean id="myAuthenticationFailureHandler"
		class="com.wxl.demo.spring.security.MyAuthenticationFailureHandler"></beans:bean>

	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login" />
	</beans:bean>
</beans:beans>